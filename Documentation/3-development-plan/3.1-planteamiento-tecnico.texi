@c Section 3.1: Planteamiento técnico
@node Planteamiento técnico
@section Planteamiento técnico

@menu
* Planteamiento de la DEMO:: ...
* Planteamiento Técnico del Desarrollo:: ...
@end menu

@c Subsection 3.1.1: Planteamiento de la DEMO
@node Planteamiento de la DEMO
@subsection Planteamiento de la DEMO

Debido a la notable falta de tiempo para la producción del producto final, se procederá a detallar una demostración generada a partir del diseño original aplicándole un corte vertical, realizando ciertos compromisos, el cual pasará a explicarse a continuación.

Con la finalidad de transmitir el propósito comunicativo original, se deberán mantener los pilares fundamentales del diseño presentado en el @b{capítulo 1} y construido durante el @b{capítulo 2}. Se contemplará una pequeña muestra de todas las mecánicas más importantes planteadas en el diseño, principalmente:

@itemize @bullet
@item
@b{Turno del futuro:} Sistema de colocación de trampas en el mapa (1-2 de cada tipo [2-3 tipos según la profundidad en el mapa]).
@item
@b{Turno del presente:} Plataformeo vertical + compra de habilidades (1-2 para la DEMO).
@item
@b{Gesión del dinero:} Sistema de dinero basado en gastos y ganancias por cada ronda.
@item
@b{Rondas:} Sistema de rondas continuo hasta que no quede más dinero.
@end itemize

@c Subsection 3.1.2: Planteamiento Técnico del Desarrollo
@node Planteamiento Técnico del Desarrollo
@subsection Planteamiento Técnico del Desarrollo

Para desarrollar el juego vamos a usar como motor @b{Unity}. @b{Unity} es uno de los motores más populares y uno de los mejores para crear juegos 2D. Algunos de los juegos que se han creado con @b{Unity} 
incluyen @i{Hollow Knight} o @i{Cuphead} entre muchos otros. También cuenta con una gran cantidad de tutoriales e información que nos ayudarán en nuestro desarrollo. 
Además tiene integrado una @i{store} de @i{assets} con una gran cantidad de diseños que podemos usar en la DEMO para ahorrar tiempo en la creación de @i{assets}.

Para poder trabajar en paralelo utilizaremos @b{Git}. Diferentes partes del juego serán implementadas en diferentes branches para al final juntar todo en la Demo final.

Finalmente haremos uso de @b{Trello} para asignar tareas entre nosotros y tener un control de lo que hay que hacer, lo que se está haciendo y quien lo está haciendo.
